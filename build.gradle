buildscript {
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61"
	}
}

plugins {
	id 'org.springframework.boot' version '2.1.8.RELEASE'
	id 'java'
	id 'eclipse'
	id "org.flywaydb.flyway" version "5.2.4"
	id 'org.jetbrains.kotlin.plugin.spring' version '1.3.61'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'

group = 'com.api'
version = '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
	jcenter()
}

sourceSets {
	main.java.srcDirs += 'src/main/kotlin'
}

compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

configurations {
	ktlint
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.1.8.RELEASE'
	implementation 'com.linecorp.bot:line-bot-spring-boot:2.7.0'
	implementation 'org.projectlombok:lombok:1.18.10'
	implementation 'org.flywaydb:flyway-core:5.2.4'
	runtime 'org.postgresql:postgresql:42.2.8'
	//	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.0.1'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.1.8.RELEASE'

	implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.61'
	implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.61'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	ktlint "com.pinterest:ktlint:0.35.0"
	// additional 3rd party ruleset(s) can be specified here
	// just add them to the classpath (ktlint 'groupId:artifactId:version') and
	// ktlint will pick them up
}

// reports dir for bitbucket-pipelines
def reportsDir = "${buildDir}/test-reports"

// ktlint
task ktlint(type: JavaExec, group: "verification") {
	description = "Check Kotlin code style."
	main = "com.pinterest.ktlint.Main"
	classpath = configurations.ktlint
	// not exec test modules
	args "src/main/**/*.kt"
	args "--reporter=plain", "--reporter=checkstyle,output=${reportsDir}/ktlint/ktlint.xml"
	// to generate report in checkstyle format prepend following args:
	// "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
	// see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

// ktlint format
task ktlintFormat(type: JavaExec, group: "formatting") {
	description = "Fix Kotlin code style deviations."
	main = "com.pinterest.ktlint.Main"
	classpath = configurations.ktlint
	// not exec test modules
	args "-F", "src/main/**/*.kt"
}
